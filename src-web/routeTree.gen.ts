/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspacesIndexImport } from './routes/workspaces/index'
import { Route as WorkspacesSettingsImport } from './routes/workspaces/settings'
import { Route as WorkspacesWorkspaceIdIndexImport } from './routes/workspaces/$workspaceId/index'
import { Route as WorkspacesWorkspaceIdRequestsRequestIdImport } from './routes/workspaces/$workspaceId/requests/$requestId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesIndexRoute = WorkspacesIndexImport.update({
  id: '/workspaces/',
  path: '/workspaces/',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesSettingsRoute = WorkspacesSettingsImport.update({
  id: '/workspaces/settings',
  path: '/workspaces/settings',
  getParentRoute: () => rootRoute,
} as any)

const WorkspacesWorkspaceIdIndexRoute = WorkspacesWorkspaceIdIndexImport.update(
  {
    id: '/workspaces/$workspaceId/',
    path: '/workspaces/$workspaceId/',
    getParentRoute: () => rootRoute,
  } as any,
)

const WorkspacesWorkspaceIdRequestsRequestIdRoute =
  WorkspacesWorkspaceIdRequestsRequestIdImport.update({
    id: '/workspaces/$workspaceId/requests/$requestId',
    path: '/workspaces/$workspaceId/requests/$requestId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/settings': {
      id: '/workspaces/settings'
      path: '/workspaces/settings'
      fullPath: '/workspaces/settings'
      preLoaderRoute: typeof WorkspacesSettingsImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/': {
      id: '/workspaces/'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesIndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId/': {
      id: '/workspaces/$workspaceId/'
      path: '/workspaces/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId/requests/$requestId': {
      id: '/workspaces/$workspaceId/requests/$requestId'
      path: '/workspaces/$workspaceId/requests/$requestId'
      fullPath: '/workspaces/$workspaceId/requests/$requestId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdRequestsRequestIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspaces/settings': typeof WorkspacesSettingsRoute
  '/workspaces': typeof WorkspacesIndexRoute
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdIndexRoute
  '/workspaces/$workspaceId/requests/$requestId': typeof WorkspacesWorkspaceIdRequestsRequestIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspaces/settings': typeof WorkspacesSettingsRoute
  '/workspaces': typeof WorkspacesIndexRoute
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdIndexRoute
  '/workspaces/$workspaceId/requests/$requestId': typeof WorkspacesWorkspaceIdRequestsRequestIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/workspaces/settings': typeof WorkspacesSettingsRoute
  '/workspaces/': typeof WorkspacesIndexRoute
  '/workspaces/$workspaceId/': typeof WorkspacesWorkspaceIdIndexRoute
  '/workspaces/$workspaceId/requests/$requestId': typeof WorkspacesWorkspaceIdRequestsRequestIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspaces/settings'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/workspaces/$workspaceId/requests/$requestId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspaces/settings'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/workspaces/$workspaceId/requests/$requestId'
  id:
    | '__root__'
    | '/'
    | '/workspaces/settings'
    | '/workspaces/'
    | '/workspaces/$workspaceId/'
    | '/workspaces/$workspaceId/requests/$requestId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspacesSettingsRoute: typeof WorkspacesSettingsRoute
  WorkspacesIndexRoute: typeof WorkspacesIndexRoute
  WorkspacesWorkspaceIdIndexRoute: typeof WorkspacesWorkspaceIdIndexRoute
  WorkspacesWorkspaceIdRequestsRequestIdRoute: typeof WorkspacesWorkspaceIdRequestsRequestIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspacesSettingsRoute: WorkspacesSettingsRoute,
  WorkspacesIndexRoute: WorkspacesIndexRoute,
  WorkspacesWorkspaceIdIndexRoute: WorkspacesWorkspaceIdIndexRoute,
  WorkspacesWorkspaceIdRequestsRequestIdRoute:
    WorkspacesWorkspaceIdRequestsRequestIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/workspaces/settings",
        "/workspaces/",
        "/workspaces/$workspaceId/",
        "/workspaces/$workspaceId/requests/$requestId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/workspaces/settings": {
      "filePath": "workspaces/settings.tsx"
    },
    "/workspaces/": {
      "filePath": "workspaces/index.tsx"
    },
    "/workspaces/$workspaceId/": {
      "filePath": "workspaces/$workspaceId/index.tsx"
    },
    "/workspaces/$workspaceId/requests/$requestId": {
      "filePath": "workspaces/$workspaceId/requests/$requestId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
